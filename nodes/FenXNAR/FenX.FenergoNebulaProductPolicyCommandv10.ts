import {
    IExecuteFunctions,
    INodeExecutionData,
    INodeProperties,
    NodeApiError,
} from 'n8n-workflow';
import { OptionsWithUri } from 'request';
import { FenXToken } from './FenXNAR.node';

let FenergoNebulaProductPolicyCommandv10Properties: INodeProperties[] = [
    {
        displayName: 'Endpoint',
        name: 'endpoint',
        type: 'options',
        options: [
            { name: 'Create product requirement set', value: 'CreateProductRequirementSet' },{ name: 'Create product requirement set version', value: 'CreateProductRequirementSetVersion' },{ name: 'Create product requirement set version from provided set id', value: 'CreateProductRequirementSetVersionFromSetId' },{ name: 'Update product requirement set version', value: 'UpdateProductRequirementSetVersion' },{ name: 'Clone product requirement set version', value: 'CloneProductRequirementSetVersion' },{ name: 'Submit product requirement set version for approval', value: 'SubmitProductRequirementSetVersion' },{ name: 'Sign product requirement set version', value: 'SignProductRequirementSetVersion' },{ name: 'Archive product requirement set version', value: 'ArchiveProductRequirementSetVersion' },{ name: 'Add requirement', value: 'AddProductRequirement' },{ name: 'Delete requirement', value: 'DeleteProductRequirement' },{ name: 'Update product pequirements DataProtectionJurisdiction', value: 'UpdateProductRequirementsDataProtectionJurisdiction' }
        ],
        displayOptions: {
            show: {
                domain: [
                    'FenergoNebulaProductPolicyCommandv10',
                ],
            },
        },
        default: '',
        required: true,
        description: 'Operation to execute',
    }, { displayName: 'setId', name: 'setId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'CreateProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'setId', name: 'setId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'CreateProductRequirementSetVersionFromSetId' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Version number to create new draft from', displayOptions: { show: { endpoint: [ 'CreateProductRequirementSetVersionFromSetId' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'setId', name: 'setId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'UpdateProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Version number to update', displayOptions: { show: { endpoint: [ 'UpdateProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'productRequirementSetId', name: 'productRequirementSetId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'CloneProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Version number to clone', displayOptions: { show: { endpoint: [ 'CloneProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'setId', name: 'setId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'SubmitProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Version number to submit', displayOptions: { show: { endpoint: [ 'SubmitProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'setId', name: 'setId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'SignProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Version number to sign', displayOptions: { show: { endpoint: [ 'SignProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'setId', name: 'setId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'ArchiveProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Version number to archive', displayOptions: { show: { endpoint: [ 'ArchiveProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'id', name: 'id', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'AddProductRequirement' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Product requirement set version number', displayOptions: { show: { endpoint: [ 'AddProductRequirement' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'id', name: 'id', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'DeleteProductRequirement' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Product requirement set version number', displayOptions: { show: { endpoint: [ 'DeleteProductRequirement' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'fieldId', name: 'fieldId', type: 'string', required: true, default: '', description: 'Product requirement id to delete', displayOptions: { show: { endpoint: [ 'DeleteProductRequirement' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'setId', name: 'setId', type: 'string', required: true, default: '', description: 'Product requirement set id', displayOptions: { show: { endpoint: [ 'UpdateProductRequirementsDataProtectionJurisdiction' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'versionNumber', name: 'versionNumber', type: 'string', required: true, default: '', description: 'Version number to update data protection jurisdiction', displayOptions: { show: { endpoint: [ 'UpdateProductRequirementsDataProtectionJurisdiction' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'Request', name: 'request', type: 'json', required: true, default: '{ "data": { "created": "2023-11-07T11:29:18.1205201+00:00", "status": "Draft", "requirements": [ { "identifier": "identifier", "requirementSetId": "requirementSetId", "category": "category", "description": "description", "template": "template", "entityType": "entityType", "name": "name", "order": 0.0, "isSensitiveData": false, "isMaterialData": false, "isCoreDefinition": false, "isIndexable": false, "isSecondaryIdentifier": false, "jurisdiction": "jurisdiction", "dataProtectionJurisdiction": "dataProtectionJurisdiction", "classification": "classification", "isReadOnly": false, "isMandatory": false, "targetEntity": "targetEntity", "type": "type", "documentDescription": "documentDescription", "documentDataKey": "documentDataKey", "partyType": "partyType", "partyTypes": [ "" ], "partyCount": 0, "uboThreshold": 0.0, "ownershipDataKey": "ownershipDataKey", "sourceEntityType": "sourceEntityType", "relatedPartyEntityTypes": [ "" ], "directAssociationsOnly": false, "idvOn": false, "idvName": "idvName", "idvTooltip": "idvTooltip", "ownershipValidationRule": { "id": "id", "setId": "setId", "ownershipValidationData": { "isMandatory": { "active": false, "message": "message" }, "partyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "addAllParties": { "active": false, "message": "message" }, "idvIsMandatory": { "active": false, "message": "message" }, "idvPartyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "idvAllParties": { "active": false, "message": "message" } } }, "dataField": { "propertyName": "propertyName", "propertyType": "propertyType", "propertyTypeId": "propertyTypeId", "linkChildFieldPropertyName": "linkChildFieldPropertyName" }, "references": [ { "type": "type", "description": "description", "url": "url" } ], "conditions": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ] } ], "validationRule": { "id": "id", "setId": "setId", "propertyId": "propertyId", "dataGroupId": "dataGroupId", "isDataGroup": false, "propertyName": "propertyName", "friendlyName": "friendlyName", "validationType": "validationType", "validationData": { "isMandatory": { "active": false, "message": "message" }, "specialCharacters": { "excludedCharacters": [ "" ], "active": false, "message": "message" }, "noNumbers": { "active": false, "message": "message" }, "onlyInteger": { "active": false, "message": "message" }, "noNegative": { "active": false, "message": "message" }, "onlyDecimal": { "active": false, "message": "message" }, "regex": { "isCaseSensitive": false, "regexValue": "regexValue", "active": false, "message": "message" }, "characterLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "numberLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "noFutureDates": { "active": false, "message": "message" }, "noPastDates": { "active": false, "message": "message" }, "disallowTodaysDate": { "active": false, "message": "message" }, "dateLimit": { "minDate": "2023-11-07T11:29:18.1207733+00:00", "maxDate": "2023-11-07T11:29:18.1207750+00:00", "rangeFrom": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "rangeTo": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "active": false, "message": "message" }, "multiSelectLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "collectionMinimumCount": { "requiredTypesMinCount": {}, "overallMinimumCount": 0, "active": false, "message": "message" }, "collectionMaximumCount": { "requiredTypesMaxCount": {}, "overallMaximumCount": 0, "active": false, "message": "message" } } }, "defaultValue": "defaultValue", "documentAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "conditionalValues": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ], "value": "value", "priority": 0 } ], "tags": [ "" ], "fieldAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "defaultDateType": "defaultDateType", "isTotalProductColumn": false } ], "setId": "setId", "name": "name", "jurisdiction": "jurisdiction", "conditions": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ] } ], "versionNumber": 0, "effectiveFrom": "2023-11-07T11:29:18.1209250+00:00", "signees": [ { "subject": "subject", "successor": { "subject": "subject", "successor": { "subject": "subject", "successor": { "subject": "subject", "successor": null, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1209434+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1209531+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1209600+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1209668+00:00" }, "hasProcessedRequest": false } ] } }', description: 'Request body', displayOptions: { show: { endpoint: [ 'CreateProductRequirementSet' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'Request', name: 'request', type: 'json', required: true, default: '{ "data": { "created": "2023-11-07T11:29:18.1210712+00:00", "status": "Draft", "requirements": [ { "identifier": "identifier", "requirementSetId": "requirementSetId", "category": "category", "description": "description", "template": "template", "entityType": "entityType", "name": "name", "order": 0.0, "isSensitiveData": false, "isMaterialData": false, "isCoreDefinition": false, "isIndexable": false, "isSecondaryIdentifier": false, "jurisdiction": "jurisdiction", "dataProtectionJurisdiction": "dataProtectionJurisdiction", "classification": "classification", "isReadOnly": false, "isMandatory": false, "targetEntity": "targetEntity", "type": "type", "documentDescription": "documentDescription", "documentDataKey": "documentDataKey", "partyType": "partyType", "partyTypes": [ "" ], "partyCount": 0, "uboThreshold": 0.0, "ownershipDataKey": "ownershipDataKey", "sourceEntityType": "sourceEntityType", "relatedPartyEntityTypes": [ "" ], "directAssociationsOnly": false, "idvOn": false, "idvName": "idvName", "idvTooltip": "idvTooltip", "ownershipValidationRule": { "id": "id", "setId": "setId", "ownershipValidationData": { "isMandatory": { "active": false, "message": "message" }, "partyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "addAllParties": { "active": false, "message": "message" }, "idvIsMandatory": { "active": false, "message": "message" }, "idvPartyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "idvAllParties": { "active": false, "message": "message" } } }, "dataField": { "propertyName": "propertyName", "propertyType": "propertyType", "propertyTypeId": "propertyTypeId", "linkChildFieldPropertyName": "linkChildFieldPropertyName" }, "references": [ { "type": "type", "description": "description", "url": "url" } ], "conditions": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ] } ], "validationRule": { "id": "id", "setId": "setId", "propertyId": "propertyId", "dataGroupId": "dataGroupId", "isDataGroup": false, "propertyName": "propertyName", "friendlyName": "friendlyName", "validationType": "validationType", "validationData": { "isMandatory": { "active": false, "message": "message" }, "specialCharacters": { "excludedCharacters": [ "" ], "active": false, "message": "message" }, "noNumbers": { "active": false, "message": "message" }, "onlyInteger": { "active": false, "message": "message" }, "noNegative": { "active": false, "message": "message" }, "onlyDecimal": { "active": false, "message": "message" }, "regex": { "isCaseSensitive": false, "regexValue": "regexValue", "active": false, "message": "message" }, "characterLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "numberLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "noFutureDates": { "active": false, "message": "message" }, "noPastDates": { "active": false, "message": "message" }, "disallowTodaysDate": { "active": false, "message": "message" }, "dateLimit": { "minDate": "2023-11-07T11:29:18.1212909+00:00", "maxDate": "2023-11-07T11:29:18.1212933+00:00", "rangeFrom": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "rangeTo": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "active": false, "message": "message" }, "multiSelectLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "collectionMinimumCount": { "requiredTypesMinCount": {}, "overallMinimumCount": 0, "active": false, "message": "message" }, "collectionMaximumCount": { "requiredTypesMaxCount": {}, "overallMaximumCount": 0, "active": false, "message": "message" } } }, "defaultValue": "defaultValue", "documentAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "conditionalValues": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ], "value": "value", "priority": 0 } ], "tags": [ "" ], "fieldAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "defaultDateType": "defaultDateType", "isTotalProductColumn": false } ], "setId": "setId", "name": "name", "jurisdiction": "jurisdiction", "conditions": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ] } ], "versionNumber": 0, "effectiveFrom": "2023-11-07T11:29:18.1214354+00:00", "signees": [ { "subject": "subject", "successor": { "subject": "subject", "successor": { "subject": "subject", "successor": { "subject": "subject", "successor": null, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1214555+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1214624+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1214693+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1214760+00:00" }, "hasProcessedRequest": false } ] } }', description: 'Request body', displayOptions: { show: { endpoint: [ 'CreateProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'Request', name: 'request', type: 'json', required: true, default: '{ "data": { "requirements": [ { "identifier": "identifier", "requirementSetId": "requirementSetId", "category": "category", "description": "description", "template": "template", "entityType": "entityType", "name": "name", "order": 0.0, "isSensitiveData": false, "isMaterialData": false, "isCoreDefinition": false, "isIndexable": false, "isSecondaryIdentifier": false, "jurisdiction": "jurisdiction", "dataProtectionJurisdiction": "dataProtectionJurisdiction", "classification": "classification", "isReadOnly": false, "isMandatory": false, "targetEntity": "targetEntity", "type": "type", "documentDescription": "documentDescription", "documentDataKey": "documentDataKey", "partyType": "partyType", "partyTypes": [ "" ], "partyCount": 0, "uboThreshold": 0.0, "ownershipDataKey": "ownershipDataKey", "sourceEntityType": "sourceEntityType", "relatedPartyEntityTypes": [ "" ], "directAssociationsOnly": false, "idvOn": false, "idvName": "idvName", "idvTooltip": "idvTooltip", "ownershipValidationRule": { "id": "id", "setId": "setId", "ownershipValidationData": { "isMandatory": { "active": false, "message": "message" }, "partyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "addAllParties": { "active": false, "message": "message" }, "idvIsMandatory": { "active": false, "message": "message" }, "idvPartyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "idvAllParties": { "active": false, "message": "message" } } }, "dataField": { "propertyName": "propertyName", "propertyType": "propertyType", "propertyTypeId": "propertyTypeId", "linkChildFieldPropertyName": "linkChildFieldPropertyName" }, "references": [ { "type": "type", "description": "description", "url": "url" } ], "conditions": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ] } ], "validationRule": { "id": "id", "setId": "setId", "propertyId": "propertyId", "dataGroupId": "dataGroupId", "isDataGroup": false, "propertyName": "propertyName", "friendlyName": "friendlyName", "validationType": "validationType", "validationData": { "isMandatory": { "active": false, "message": "message" }, "specialCharacters": { "excludedCharacters": [ "" ], "active": false, "message": "message" }, "noNumbers": { "active": false, "message": "message" }, "onlyInteger": { "active": false, "message": "message" }, "noNegative": { "active": false, "message": "message" }, "onlyDecimal": { "active": false, "message": "message" }, "regex": { "isCaseSensitive": false, "regexValue": "regexValue", "active": false, "message": "message" }, "characterLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "numberLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "noFutureDates": { "active": false, "message": "message" }, "noPastDates": { "active": false, "message": "message" }, "disallowTodaysDate": { "active": false, "message": "message" }, "dateLimit": { "minDate": "2023-11-07T11:29:18.1217760+00:00", "maxDate": "2023-11-07T11:29:18.1217780+00:00", "rangeFrom": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "rangeTo": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "active": false, "message": "message" }, "multiSelectLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "collectionMinimumCount": { "requiredTypesMinCount": {}, "overallMinimumCount": 0, "active": false, "message": "message" }, "collectionMaximumCount": { "requiredTypesMaxCount": {}, "overallMaximumCount": 0, "active": false, "message": "message" } } }, "defaultValue": "defaultValue", "documentAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "conditionalValues": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ], "value": "value", "priority": 0 } ], "tags": [ "" ], "fieldAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "defaultDateType": "defaultDateType", "isTotalProductColumn": false } ], "defaultDataProtectionJurisdiction": "defaultDataProtectionJurisdiction", "version": -1, "setId": "setId", "name": "name", "jurisdiction": "jurisdiction", "conditions": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ] } ], "versionNumber": 0, "effectiveFrom": "2023-11-07T11:29:18.1219347+00:00", "signees": [ { "subject": "subject", "successor": { "subject": "subject", "successor": { "subject": "subject", "successor": { "subject": "subject", "successor": null, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1219542+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1219613+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1219676+00:00" }, "hasProcessedRequest": false }, "action": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1219744+00:00" }, "hasProcessedRequest": false } ] } }', description: 'Request body', displayOptions: { show: { endpoint: [ 'UpdateProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'Request', name: 'request', type: 'json', required: true, default: '{ "data": { "name": "name", "jurisdiction": "jurisdiction" } }', description: 'Request body', displayOptions: { show: { endpoint: [ 'CloneProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'Request', name: 'request', type: 'json', required: true, default: '{ "data": { "comment": "comment", "decision": "Approve", "created": "2023-11-07T11:29:18.1220797+00:00" } }', description: 'Request body', displayOptions: { show: { endpoint: [ 'SignProductRequirementSetVersion' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } },{ displayName: 'Request', name: 'request', type: 'json', required: true, default: '{ "data": { "identifier": "identifier", "requirementSetId": "requirementSetId", "category": "category", "description": "description", "template": "template", "entityType": "entityType", "name": "name", "order": 0.0, "isSensitiveData": false, "isMaterialData": false, "isCoreDefinition": false, "isIndexable": false, "isSecondaryIdentifier": false, "jurisdiction": "jurisdiction", "dataProtectionJurisdiction": "dataProtectionJurisdiction", "classification": "classification", "isReadOnly": false, "isMandatory": false, "targetEntity": "targetEntity", "type": "type", "documentDescription": "documentDescription", "documentDataKey": "documentDataKey", "partyType": "partyType", "partyTypes": [ "" ], "partyCount": 0, "uboThreshold": 0.0, "ownershipDataKey": "ownershipDataKey", "sourceEntityType": "sourceEntityType", "relatedPartyEntityTypes": [ "" ], "directAssociationsOnly": false, "idvOn": false, "idvName": "idvName", "idvTooltip": "idvTooltip", "ownershipValidationRule": { "id": "id", "setId": "setId", "ownershipValidationData": { "isMandatory": { "active": false, "message": "message" }, "partyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "addAllParties": { "active": false, "message": "message" }, "idvIsMandatory": { "active": false, "message": "message" }, "idvPartyCount": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "idvAllParties": { "active": false, "message": "message" } } }, "dataField": { "propertyName": "propertyName", "propertyType": "propertyType", "propertyTypeId": "propertyTypeId", "linkChildFieldPropertyName": "linkChildFieldPropertyName" }, "references": [ { "type": "type", "description": "description", "url": "url" } ], "conditions": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ] } ], "validationRule": { "id": "id", "setId": "setId", "propertyId": "propertyId", "dataGroupId": "dataGroupId", "isDataGroup": false, "propertyName": "propertyName", "friendlyName": "friendlyName", "validationType": "validationType", "validationData": { "isMandatory": { "active": false, "message": "message" }, "specialCharacters": { "excludedCharacters": [ "" ], "active": false, "message": "message" }, "noNumbers": { "active": false, "message": "message" }, "onlyInteger": { "active": false, "message": "message" }, "noNegative": { "active": false, "message": "message" }, "onlyDecimal": { "active": false, "message": "message" }, "regex": { "isCaseSensitive": false, "regexValue": "regexValue", "active": false, "message": "message" }, "characterLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "numberLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "noFutureDates": { "active": false, "message": "message" }, "noPastDates": { "active": false, "message": "message" }, "disallowTodaysDate": { "active": false, "message": "message" }, "dateLimit": { "minDate": "2023-11-07T11:29:18.1223109+00:00", "maxDate": "2023-11-07T11:29:18.1223126+00:00", "rangeFrom": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "rangeTo": { "type": "type", "relativeTo": "relativeTo", "source": "source", "field": "field", "offset": "offset", "periodType": "periodType", "offsetPeriod": "offsetPeriod" }, "active": false, "message": "message" }, "multiSelectLimit": { "minValue": 0, "maxValue": 0, "active": false, "message": "message" }, "collectionMinimumCount": { "requiredTypesMinCount": {}, "overallMinimumCount": 0, "active": false, "message": "message" }, "collectionMaximumCount": { "requiredTypesMaxCount": {}, "overallMaximumCount": 0, "active": false, "message": "message" } } }, "defaultValue": "defaultValue", "documentAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "conditionalValues": [ { "id": "id", "name": "name", "description": "description", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [ { "fieldName": "fieldName", "value": [ "" ], "valueType": "valueType", "dataSource": "dataSource", "operation": "operation", "logicalOperation": "logicalOperation", "operands": [] } ] } ] } ], "value": "value", "priority": 0 } ], "tags": [ "" ], "fieldAccessLayers": { "geographic": [ "" ], "businessRelated": [ "" ] }, "defaultDateType": "defaultDateType", "isTotalProductColumn": false } }', description: 'Request body', displayOptions: { show: { endpoint: [ 'AddProductRequirement' ], domain: [ 'FenergoNebulaProductPolicyCommandv10' ] } } }
];

async function ExecuteFenergoNebulaProductPolicyCommandv10(base: IExecuteFunctions): Promise < INodeExecutionData[][] > {
    // @ts-ignore
    let token = await FenXToken.getToken(base);

    let requestOptions: OptionsWithUri = {
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token,
            'x-tenant-id': FenXToken.tenant
        },
        gzip: true,
        timeout: 3600000,
        uri: ""
    };

    const endpoint = base.getNodeParameter('endpoint', 0) as string;

    let setId=''; let versionNumber=''; let productRequirementSetId=''; let id=''; let fieldId='';
switch(endpoint){ case 'CreateProductRequirementSet': 
requestOptions.method = 'POST';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set';

requestOptions.body = base.getNodeParameter('request', 0) as string; requestOptions.json = true;break;
case 'CreateProductRequirementSetVersion': setId = base.getNodeParameter('setId', 0) as string;
requestOptions.method = 'POST';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{setId}'.replace('{setId}', setId);

requestOptions.body = base.getNodeParameter('request', 0) as string; requestOptions.json = true;break;
case 'CreateProductRequirementSetVersionFromSetId': setId = base.getNodeParameter('setId', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'POST';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{setId}/version/{versionNumber}/draft'.replace('{setId}', setId).replace('{versionNumber}', versionNumber);

break;
case 'UpdateProductRequirementSetVersion': setId = base.getNodeParameter('setId', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'PUT';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{setId}/version/{versionNumber}'.replace('{setId}', setId).replace('{versionNumber}', versionNumber);

requestOptions.body = base.getNodeParameter('request', 0) as string; requestOptions.json = true;break;
case 'CloneProductRequirementSetVersion': productRequirementSetId = base.getNodeParameter('productRequirementSetId', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'POST';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{productRequirementSetId}/version/{versionNumber}/clone'.replace('{productRequirementSetId}', productRequirementSetId).replace('{versionNumber}', versionNumber);

requestOptions.body = base.getNodeParameter('request', 0) as string; requestOptions.json = true;break;
case 'SubmitProductRequirementSetVersion': setId = base.getNodeParameter('setId', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'PUT';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{setId}/version/{versionNumber}/submit-for-approval'.replace('{setId}', setId).replace('{versionNumber}', versionNumber);

break;
case 'SignProductRequirementSetVersion': setId = base.getNodeParameter('setId', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'PUT';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{setId}/version/{versionNumber}/sign'.replace('{setId}', setId).replace('{versionNumber}', versionNumber);

requestOptions.body = base.getNodeParameter('request', 0) as string; requestOptions.json = true;break;
case 'ArchiveProductRequirementSetVersion': setId = base.getNodeParameter('setId', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'PUT';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{setId}/version/{versionNumber}/archive'.replace('{setId}', setId).replace('{versionNumber}', versionNumber);

break;
case 'AddProductRequirement': id = base.getNodeParameter('id', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'POST';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{id}/version/{versionNumber}/field'.replace('{id}', id).replace('{versionNumber}', versionNumber);

requestOptions.body = base.getNodeParameter('request', 0) as string; requestOptions.json = true;break;
case 'DeleteProductRequirement': id = base.getNodeParameter('id', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
fieldId = base.getNodeParameter('fieldId', 0) as string;
requestOptions.method = 'DELETE';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{id}/version/{versionNumber}/field/{fieldId}'.replace('{id}', id).replace('{versionNumber}', versionNumber).replace('{fieldId}', fieldId);

break;
case 'UpdateProductRequirementsDataProtectionJurisdiction': setId = base.getNodeParameter('setId', 0) as string;
versionNumber = base.getNodeParameter('versionNumber', 0) as string;
requestOptions.method = 'PUT';
requestOptions.uri = 'https://api.nar1.fenergox.com/productpolicycommand/api/product-requirement-set/{setId}/version/{versionNumber}/update-product-requirements-dataprotection-jurisdiction'.replace('{setId}', setId).replace('{versionNumber}', versionNumber);

break;
}

	let request = base.helpers.request(requestOptions);

    // @ts-ignore
    const promisesResponses = await Promise.allSettled([request]);
    let response: any; // tslint:disable-line:no-any
    response = promisesResponses.shift();
    if(response!.status !== 'fulfilled') {
    // throw error;
    console.log(request);
    throw new NodeApiError(base.getNode(), response);
}
    try {
        response = JSON.parse(response.value);
    }
    catch { response = response.value; }

const returnItems: INodeExecutionData[] = [];
returnItems.push({ json: response });

return base.prepareOutputData(returnItems);
}

export {
    FenergoNebulaProductPolicyCommandv10Properties,
    ExecuteFenergoNebulaProductPolicyCommandv10
}
